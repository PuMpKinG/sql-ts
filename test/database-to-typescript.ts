/**
 * using library sql-ts
 * more information: https://github.com/rmp135/sql-ts
 **/

import * as fs from 'fs';
import * as yargs from 'yargs';
import * as path from 'path';
import * as sqlts from '../dist';
import {Config} from '../dist';
import {DecoratedColumn, DecoratedDatabase, DecoratedTable} from '../dist/Typings';

// path argument over console call
const pathArg: string = yargs.config().argv.path?.toString();
const dbHostArg: string = yargs.config().argv.dbhost?.toString();
const dbUserArg: string = yargs.config().argv.dbuser?.toString();
const dbPassArg: string = yargs.config().argv.dbpass?.toString();
const dbNameArg: string = yargs.config().argv.dbname?.toString();

let config = <Config>{};
config = {
  client: 'postgres',
  connection: {
    host: dbHostArg ?? 'localhost',
    user: dbUserArg ?? 'ghs_transom_dev',
    password: dbPassArg ?? 'ghs',
    database: dbNameArg ?? 'ghs_transom_dev',
  },
  excludedTables: [
    'public.content_store',
    'public.databasechangelog',
    'public.databasechangeloglock',
    'public.modeshape_repository',
  ],
  extends: {
    'public.*': 'GhsDataObject',
  },
  typeMap: {
    number: ['decimal', 'float'],
    string: ['nvarchar', 'varchar'],
  },
  filename: 'database.models',
  folder: pathArg ?? './test/',
  interfaceNameFormat: '${table}View',
  tableNameCasing: 'pascal',
  columnNameCasing: 'camel',
};

const GHS_DATA_OBJ_ATTR = [
  'autoid',
  'createdBy',
  'createTime',
  'lastModifiedBy',
  'lastChangeTime',
];

// const definitions = await sqlts.toTypeScript(config);
const run = async () => {
  console.log(`Start to convert...\n`);
  return await sqlts.toObject(config);
};

run().then((database: DecoratedDatabase) => {
  /**
   * Generate the _DTO_CLASS File for all tables.
   * This file includes TableName = ObjectReference constants
   */
  createDTO_CLASSts(database);

  database.tables.forEach((table: DecoratedTable) => {
    // Extends the interface
    table.extends = 'GhsDataObject';

    // so remove all defined values of the GhsDataObject interface
    // autoid: number;
    // createdBy: string;
    // createTime: Date;
    // lastModifiedBy: string;
    // lastChangeTime: Date;
    table.columns = table.columns.filter(
      (column: DecoratedColumn) =>
        GHS_DATA_OBJ_ATTR.indexOf(column.propertyName) === -1
    );

    table.columns.forEach((column: DecoratedColumn) => {
      // Replace all columns with "Flag" to boolean
      if (column.propertyName.indexOf('Flag') > -1) {
        column.propertyType = 'boolean';
      }

      // For every "Ref" Property add a RefObj
      if (column.propertyName.indexOf('Ref') > -1) {
        const refObj = <DecoratedColumn>{};
        refObj.propertyName = column.propertyName + 'Obj';
        refObj.propertyType = column.contraintRefTable;
        refObj.nullable = column.nullable;
        refObj.optional = column.optional;

        table.columns.push(refObj);
      }
    });

    // sorting attributes
    table.columns = table.columns.sort((a, b) => {
      return a.propertyName.localeCompare(b.propertyName);
    });
  });

  definitionToString(database).then((output) => {
    // include import to GhsDataObject
    output =
      "import { GhsDataObject } from './ghs-data-object.models';\n" + output;

    // add better commentary
    output = output.replace(
      'This file was generated by a tool.',
      'File is AUTO-GENERATED! Do not change it.\n* Last creation was: ' +
        new Date().toISOString()
    );
    output = output.replace(
      'Rerun sql-ts to regenerate this file.',
      'Generator can be found in tools/sql-ts. To run this generator look in README.md. '
    );

    // replace all unnessesary ""
    let regex = /"/gi;
    output = output.replace(regex, '');

    const fileName = `${config.filename ?? 'Database'}.ts`;
    const directory = config.folder ?? '.';
    const outFile = path.join(directory, fileName);
    fs.writeFileSync(outFile, output);
    console.log(`Definition file written as ${outFile}`);
  });
});

const definitionToString = async (database) => {
  return sqlts.fromObject(database, config);
};

function createDTO_CLASSts(database: DecoratedDatabase) {
  let tableNames = [];
  const header =
    '/** File is AUTO-GENERATED! Do not change it.\n* Last creation was: ' +
    new Date().toISOString() +
    '\n* Generator can be found in tools/sql-ts. To run this generator look in README.md.\n**/\n';

  let dtoClassFile =
    "export const DTO_PREFIX = 'Tb';\nexport const DTO_SUFFIX = 'View';\nexport const DTO_CLASS = {\n";
  database.tables.forEach((table: DecoratedTable) => {
    tableNames.push(table.interfaceName);
    dtoClassFile +=
      '\t' + table.interfaceName + ': () => <' + table.interfaceName + '>{},\n';
  });

  const importStatement =
    'import { ' + tableNames.join(',\n ') + "} from './database.models';\n\n";

  const fileString = header + importStatement + dtoClassFile + '\n};';

  const fileName = `_DTO_CLASS.ts`;
  const directory = config.folder ?? '.';
  const outFile = path.join(directory, fileName);
  fs.writeFileSync(outFile, fileString);
  console.log(`_DTO_CLASS file written as ${outFile}`);
}
